import*as t from"crypto";import e from"node-fetch";import{v4 as n}from"uuid";function o(t=32){const e="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";let n="";for(let o=0;o<t;o++)n+=e.charAt(Math.floor(Math.random()*e.length));return n}function s(e,n){return t.createHmac("sha256",e).update(n).digest("hex")}function i(t,e,n){return s(t,n)===e}class r{constructor({api_version:t,hooks:e=[],name:n,secret:o,mode:s="sandbox"}){this.api_version=t,this.hooks=e,this.secret=o,this.mode=s,this.name=n,this.internalEvent=[]}trigger(t,e){const o=this.getWebhooks(t);return Promise.all(o.map((({url:o})=>this.post(o,{idempotency_key:n(),api_version:this.api_version,type:t,data:e}))))}add(t,e){const n={url:t,events:e};this.hooks.push(n)}$onDone(t){this.internalEvent.push(t)}getWebhooks(t){return this.hooks.filter((e=>!e.events||e.events.includes(t)))}async post(t,o){const i={...o,id:n(),created:Date.now()},r=JSON.stringify(null!=i?i:{}),a={method:"POST",headers:{"Content-Type":"application/json","X-Environment":this.mode,[`X${this.name?`-${this.name}`:""}-Signature`]:s(this.secret,r)},body:r},h=await e(t,a);return await Promise.all(this.internalEvent.map((e=>e(t,i,h)))),h}}export{r as WebhookClient,o as createSecret,i as verifySignature};
